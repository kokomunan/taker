<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\taker_os.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\taker_os.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Mon Oct 22 19:37:40 2018
<BR><P>
<H3>Maximum Stack Usage =        640 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
entry_thread &rArr; start_adv &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[c]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[12]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">SysTick_Handler</a><BR>
 <LI><a href="#[22]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[48]">logger_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">logger_thread</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1]">Close_ble</a> from ble_server.o(i.Close_ble) referenced 2 times from ble_server.o(.data)
 <LI><a href="#[10]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[37]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from hardfault_handler_keil.o(.emb_text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[39]">HardFault_c_handler</a> from hardfault_implementation.o(i.HardFault_c_handler) referenced from hardfault_handler_keil.o(.emb_text)
 <LI><a href="#[36]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2]">Ioctl_ble</a> from ble_server.o(i.Ioctl_ble) referenced 2 times from ble_server.o(.data)
 <LI><a href="#[31]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[0]">Open_ble</a> from ble_server.o(i.Open_ble) referenced 2 times from ble_server.o(.data)
 <LI><a href="#[30]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">POWER_CLOCK_IRQHandler</a> from nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[32]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[33]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from port.o(.emb_text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">RTC1_IRQHandler</a> from port_cmsis_systick.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[35]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">Read_ble</a> from ble_server.o(i.Read_ble) referenced 2 times from ble_server.o(.data)
 <LI><a href="#[9]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">SAADC_IRQHandler</a> from nrf_drv_saadc.o(i.SAADC_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrf_drv_spi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrf_drv_twi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[34]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from port.o(.emb_text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">SWI2_EGU2_IRQHandler</a> from softdevice_handler.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3a]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[1f]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">UARTE0_UART0_IRQHandler</a> from nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4]">Write_ble</a> from ble_server.o(i.Write_ble) referenced 2 times from ble_server.o(.data)
 <LI><a href="#[3b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[3c]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[3d]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[3f]">app_timer_callback</a> from app_timer_freertos.o(i.app_timer_callback) referenced from app_timer_freertos.o(i.app_timer_create)
 <LI><a href="#[4e]">bas_handler</a> from ble_statck_thread.o(i.bas_handler) referenced from ble_statck_thread.o(i.services_init)
 <LI><a href="#[6]">ble_clear_buff</a> from ble_server.o(i.ble_clear_buff) referenced 2 times from ble_server.o(.data)
 <LI><a href="#[7]">ble_direct_write</a> from ble_server.o(i.ble_direct_write) referenced 2 times from ble_server.o(.data)
 <LI><a href="#[42]">ble_evt_dispatch</a> from ble_statck_thread.o(i.ble_evt_dispatch) referenced from ble_statck_thread.o(i.ble_stack_thread)
 <LI><a href="#[41]">ble_new_event_handler</a> from ble_statck_thread.o(i.ble_new_event_handler) referenced from ble_statck_thread.o(i.ble_stack_thread)
 <LI><a href="#[46]">ble_stack_thread</a> from ble_statck_thread.o(i.ble_stack_thread) referenced from entry_thread.o(i.entry_thread)
 <LI><a href="#[45]">conn_params_error_handler</a> from ble_statck_thread.o(i.conn_params_error_handler) referenced from ble_statck_thread.o(i.ble_stack_thread)
 <LI><a href="#[47]">entry_thread</a> from entry_thread.o(i.entry_thread) referenced from main.o(i.main)
 <LI><a href="#[8]">env_var_callback</a> from env.o(i.env_var_callback) referenced 2 times from env.o(fs_data)
 <LI><a href="#[48]">logger_thread</a> from main.o(i.logger_thread) referenced from main.o(i.main)
 <LI><a href="#[38]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[5]">manager_ble</a> from ble_server.o(i.manager_ble) referenced 2 times from ble_server.o(.data)
 <LI><a href="#[49]">nrf_log_backend_serial_hexdump_handler</a> from nrf_log_backend_serial.o(i.nrf_log_backend_serial_hexdump_handler) referenced from nrf_log_backend_serial.o(i.nrf_log_backend_hexdump_handler_get)
 <LI><a href="#[4b]">nrf_log_backend_serial_std_handler</a> from nrf_log_backend_serial.o(i.nrf_log_backend_serial_std_handler) referenced from nrf_log_backend_serial.o(i.nrf_log_backend_std_handler_get)
 <LI><a href="#[4d]">nus_data_handler</a> from ble_statck_thread.o(i.nus_data_handler) referenced from ble_statck_thread.o(i.services_init)
 <LI><a href="#[3e]">on_adv_evt</a> from ble_statck_thread.o(i.on_adv_evt) referenced from ble_statck_thread.o(i.advertising_init)
 <LI><a href="#[44]">on_conn_params_evt</a> from ble_statck_thread.o(i.on_conn_params_evt) referenced from ble_statck_thread.o(i.ble_stack_thread)
 <LI><a href="#[50]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[4c]">prvTaskExitError</a> from port_cmsis.o(i.prvTaskExitError) referenced from port_cmsis.o(i.pxPortInitialiseStack)
 <LI><a href="#[51]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[4f]">softdevice_fault_handler</a> from softdevice_handler.o(i.softdevice_fault_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[43]">sys_evt_dispatch</a> from ble_statck_thread.o(i.sys_evt_dispatch) referenced from ble_statck_thread.o(i.ble_stack_thread)
 <LI><a href="#[4a]">uart_event_handler</a> from nrf_log_backend_serial.o(i.uart_event_handler) referenced from nrf_log_backend_serial.o(i.nrf_log_backend_init)
 <LI><a href="#[40]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[ef]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[52]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f0]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f1]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f2]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f3]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f4]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>vPortStartFirstTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hardfault_handler_keil.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ble
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_client_response
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_thread
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ble
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8d]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_client_response
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[53]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[fa]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[fb]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[fc]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>Close_ble</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ble_server.o(i.Close_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Close_ble &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_server.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 420 bytes, Stack size 88 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPIOTE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>HardFault_c_handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hardfault_implementation.o(i.HardFault_c_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HardFault_c_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_process
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_blocking_backend_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardfault_handler_keil.o(.emb_text)
</UL>
<P><STRONG><a name="[61]"></a>HardFault_process</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hardfault_implementation.o(i.HardFault_process))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[2]"></a>Ioctl_ble</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ble_server.o(i.Ioctl_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Ioctl_ble &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_client_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_server.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>Open_ble</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_server.o(i.Open_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Open_ble &rArr; nrf_queue_reset &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_server.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = POWER_CLOCK_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RTC1_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, port_cmsis_systick.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC1_IRQHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>Read_ble</STRONG> (Thumb, 60 bytes, Stack size 192 bytes, ble_server.o(i.Read_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Read_ble &rArr; nrf_queue_write &rArr; queue_write &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_write
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_server.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>SAADC_IRQHandler</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, nrf_drv_saadc.o(i.SAADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SAADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler &rArr; twi_tx_start_transfer &rArr; twi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, softdevice_handler.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SystemInit</STRONG> (Thumb, 554 bytes, Stack size 12 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 640 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTE0_UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>Write_ble</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_server.o(i.Write_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Write_ble &rArr; nrf_queue_write &rArr; queue_write &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_server.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>__0snprintf$8</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ff]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[c0]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[71]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[100]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[8c]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_client_response
</UL>

<P><STRONG><a name="[83]"></a>__ARM_common_memclr4_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_advertising.o(i.__ARM_common_memclr4_7))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[8e]"></a>__ARM_common_memcpy4_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_client_response.o(i.__ARM_common_memcpy4_5))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_client_response
</UL>

<P><STRONG><a name="[101]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[102]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[103]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[74]"></a>adv_data_encode</STRONG> (Thumb, 966 bytes, Stack size 48 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[62]"></a>advertising_init</STRONG> (Thumb, 192 bytes, Stack size 176 bytes, ble_statck_thread.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_adv
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ioctl_ble
</UL>

<P><STRONG><a name="[77]"></a>app_error_fault_handler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_save_and_stop
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_blocking_backend_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_fault_handler
</UL>

<P><STRONG><a name="[5c]"></a>app_error_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_adv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_thread
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_thread
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ioctl_ble
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_ble
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>app_error_save_and_stop</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, app_error.o(i.app_error_save_and_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_error_save_and_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[7a]"></a>app_timer_create</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, app_timer_freertos.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_timer_create &rArr; xTimerCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
</UL>

<P><STRONG><a name="[7c]"></a>app_timer_start</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, app_timer_freertos.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[81]"></a>app_timer_stop</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, app_timer_freertos.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[a9]"></a>app_util_critical_region_enter</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_write
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_reset
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
</UL>

<P><STRONG><a name="[aa]"></a>app_util_critical_region_exit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_write
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_reset
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
</UL>

<P><STRONG><a name="[4e]"></a>bas_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_statck_thread.o(i.bas_handler))
<BR>[Address Reference Count : 1]<UL><LI> ble_statck_thread.o(i.services_init)
</UL>
<P><STRONG><a name="[82]"></a>ble_advdata_set</STRONG> (Thumb, 120 bytes, Stack size 104 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[76]"></a>ble_advertising_init</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_7
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[84]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[85]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[63]"></a>ble_advertising_start</STRONG> (Thumb, 496 bytes, Stack size 56 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_queued_op_count_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_7
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_adv
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ioctl_ble
</UL>

<P><STRONG><a name="[87]"></a>ble_bas_init</STRONG> (Thumb, 394 bytes, Stack size 112 bytes, ble_bas.o(i.ble_bas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_bas_init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[6]"></a>ble_clear_buff</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_server.o(i.ble_clear_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_clear_buff &rArr; nrf_queue_reset &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_server.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>ble_client_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_client_response.o(i.ble_client_init))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ioctl_ble
</UL>

<P><STRONG><a name="[89]"></a>ble_client_response</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, ble_client_response.o(i.ble_client_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ble_client_response &rArr; write_rtc_data &rArr; twi_master_tx &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_notify_host
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rtc_data
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_6
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manager_ble
</UL>

<P><STRONG><a name="[91]"></a>ble_conn_params_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_conn_params_init &rArr; app_timer_create &rArr; xTimerCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_thread
</UL>

<P><STRONG><a name="[92]"></a>ble_conn_params_on_ble_evt</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ble_conn_params_on_ble_evt &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[95]"></a>ble_conn_state_on_ble_evt</STRONG> (Thumb, 278 bytes, Stack size 72 bytes, ble_conn_state.o(i.ble_conn_state_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ble_conn_state_on_ble_evt &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[7]"></a>ble_direct_write</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_server.o(i.ble_direct_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_direct_write &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_string_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_server.o(.data)
</UL>
<P><STRONG><a name="[d8]"></a>ble_nus_init</STRONG> (Thumb, 444 bytes, Stack size 104 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_nus_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[9c]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_nus_on_ble_evt &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[9a]"></a>ble_nus_string_send</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ble_nus.o(i.ble_nus_string_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_thread
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manager_ble
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_direct_write
</UL>

<P><STRONG><a name="[9e]"></a>ble_robotpen_dis_init</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, ble_robotpen_dis.o(i.ble_robotpen_dis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ble_robotpen_dis_init &rArr; char_add &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[93]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[88]"></a>ble_srv_report_ref_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_report_ref_encode))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
</UL>

<P><STRONG><a name="[46]"></a>ble_stack_thread</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, ble_statck_thread.o(i.ble_stack_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ble_stack_thread &rArr; intern_softdevice_events_execute &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry_thread.o(i.entry_thread)
</UL>
<P><STRONG><a name="[dc]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[47]"></a>entry_thread</STRONG> (Thumb, 162 bytes, Stack size 184 bytes, entry_thread.o(i.entry_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = entry_thread &rArr; start_adv &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_adv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_string_send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[8]"></a>env_var_callback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, env.o(i.env_var_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = env_var_callback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> env.o(fs_data)
</UL>
<P><STRONG><a name="[86]"></a>fs_queued_op_count_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fstorage.o(i.fs_queued_op_count_get))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[ae]"></a>fs_sys_event_handler</STRONG> (Thumb, 462 bytes, Stack size 32 bytes, fstorage.o(i.fs_sys_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fs_sys_event_handler &rArr; queue_process
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[e4]"></a>int_to_BCD</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, ex_rtc.o(i.int_to_BCD))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rtc_data
</UL>

<P><STRONG><a name="[a7]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_thread
</UL>

<P><STRONG><a name="[38]"></a>main</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[5]"></a>manager_ble</STRONG> (Thumb, 110 bytes, Stack size 192 bytes, ble_server.o(i.manager_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = manager_ble &rArr; ble_client_response &rArr; write_rtc_data &rArr; twi_master_tx &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_string_send
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_client_response
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_server.o(.data)
</UL>
<P><STRONG><a name="[b1]"></a>nrf_drv_clock_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_clock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_is_enabled
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>nrf_drv_clock_lfclk_request</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_drv_clock_lfclk_request &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>

<P><STRONG><a name="[b9]"></a>nrf_drv_clock_on_sd_enable</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_sd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_drv_clock_on_sd_enable &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_is_enabled
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[6d]"></a>nrf_drv_clock_on_soc_event</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_soc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_clock_on_soc_event
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[ba]"></a>nrf_drv_twi_tx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_master_tx
</UL>

<P><STRONG><a name="[bb]"></a>nrf_drv_twi_xfer</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrf_drv_twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_drv_twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>

<P><STRONG><a name="[bc]"></a>nrf_drv_uart_init</STRONG> (Thumb, 492 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>

<P><STRONG><a name="[c2]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[bf]"></a>nrf_drv_uart_tx_in_progress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[be]"></a>nrf_drv_uart_uninit</STRONG> (Thumb, 260 bytes, Stack size 20 bytes, nrf_drv_uart.o(i.nrf_drv_uart_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_drv_uart_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>

<P><STRONG><a name="[c4]"></a>nrf_log_backend_hexdump_handler_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_hexdump_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[bd]"></a>nrf_log_backend_init</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_blocking_backend_set
</UL>

<P><STRONG><a name="[c3]"></a>nrf_log_backend_std_handler_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_std_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[5f]"></a>nrf_log_blocking_backend_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_blocking_backend_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[60]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_log_frontend_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_thread
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[6e]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_thread
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_thread
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ble
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_client_response
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_status_call_back
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[5e]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_log_frontend_std_1 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_thread
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_client_response
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[8f]"></a>nrf_log_frontend_std_5</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nrf_log_frontend_std_5 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_client_response
</UL>

<P><STRONG><a name="[8b]"></a>nrf_log_frontend_std_6</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nrf_log_frontend_std_6 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_client_response
</UL>

<P><STRONG><a name="[b2]"></a>nrf_log_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nrf_log_init &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_std_handler_get
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_hexdump_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>nrf_queue_read</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, nrf_queue.o(i.nrf_queue_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_queue_read &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manager_ble
</UL>

<P><STRONG><a name="[65]"></a>nrf_queue_reset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_queue_reset &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_clear_buff
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_ble
</UL>

<P><STRONG><a name="[69]"></a>nrf_queue_write</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, nrf_queue.o(i.nrf_queue_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nrf_queue_write &rArr; queue_write &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ble
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ble
</UL>

<P><STRONG><a name="[d7]"></a>pvPortMalloc</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, heap_1.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[e7]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[79]"></a>pvTimerGetTimerID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timers.o(i.pvTimerGetTimerID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pvTimerGetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_callback
</UL>

<P><STRONG><a name="[ed]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port_cmsis.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[98]"></a>sdk_mapped_flags_bulk_update_by_key</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_bulk_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[99]"></a>sdk_mapped_flags_first_key_index_get</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_first_key_index_get))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[97]"></a>sdk_mapped_flags_key_list_get</STRONG> (Thumb, 98 bytes, Stack size 36 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_key_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sdk_mapped_flags_key_list_get
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[96]"></a>sdk_mapped_flags_update_by_key</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdk_mapped_flags_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[8a]"></a>server_notify_host</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, server_thread.o(i.server_notify_host))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_client_response
</UL>

<P><STRONG><a name="[b5]"></a>server_status_call_back</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, server_thread.o(i.server_status_call_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = server_status_call_back &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manager_ble
</UL>

<P><STRONG><a name="[ac]"></a>services_init</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, ble_statck_thread.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = services_init &rArr; ble_robotpen_dis_init &rArr; char_add &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_robotpen_dis_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_thread
</UL>

<P><STRONG><a name="[9b]"></a>set_ble_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_server.o(i.set_ble_status))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[a4]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_thread
</UL>

<P><STRONG><a name="[a3]"></a>softdevice_enable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = softdevice_enable &rArr; nrf_log_frontend_std_1 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_thread
</UL>

<P><STRONG><a name="[a2]"></a>softdevice_enable_get_default_config</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_enable_get_default_config))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_thread
</UL>

<P><STRONG><a name="[4f]"></a>softdevice_fault_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = softdevice_fault_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[a1]"></a>softdevice_handler_init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = softdevice_handler_init &rArr; nrf_drv_clock_on_sd_enable &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_thread
</UL>

<P><STRONG><a name="[b7]"></a>softdevice_handler_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_handler_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
</UL>

<P><STRONG><a name="[a5]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_sys_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_thread
</UL>

<P><STRONG><a name="[ad]"></a>start_adv</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ble_server.o(i.start_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = start_adv &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_thread
</UL>

<P><STRONG><a name="[d9]"></a>twi_master_tx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tiw_bus.o(i.twi_master_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = twi_master_tx &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rtc_data
</UL>

<P><STRONG><a name="[ca]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[cd]"></a>vApplicationIdleHook</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.vApplicationIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vApplicationIdleHook &rArr; vTaskResume
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[e6]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[ec]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[c7]"></a>vListInsert</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[e0]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[c9]"></a>vPortEnterCritical</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port_cmsis.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[cb]"></a>vPortExitCritical</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port_cmsis.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[cc]"></a>vPortFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_1.o(i.vPortFree))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[db]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port_cmsis_systick.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vPortSetupTimerInterrupt &rArr; nrf_drv_clock_lfclk_request &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[ce]"></a>vPortSuppressTicksAndSleep</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, port_cmsis_systick.o(i.vPortSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPortSuppressTicksAndSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[ee]"></a>vQueueAddToRegistry</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[d3]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[5d]"></a>vTaskDelay</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_thread
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_ble
</UL>

<P><STRONG><a name="[d6]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[df]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[de]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[e1]"></a>vTaskPriorityInherit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[da]"></a>vTaskResume</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tasks.o(i.vTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskResume
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>

<P><STRONG><a name="[e8]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[b3]"></a>vTaskStartScheduler</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>vTaskStepTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskStepTick))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[b0]"></a>vTaskSuspend</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, tasks.o(i.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_thread
</UL>

<P><STRONG><a name="[d2]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[54]"></a>vTaskSwitchContext</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[90]"></a>write_rtc_data</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ex_rtc.o(i.write_rtc_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = write_rtc_data &rArr; twi_master_tx &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_BCD
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_master_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_client_response
</UL>

<P><STRONG><a name="[e3]"></a>xPortStartScheduler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port_cmsis.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xPortStartScheduler &rArr; vPortSetupTimerInterrupt &rArr; nrf_drv_clock_lfclk_request &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[a0]"></a>xQueueGenericCreate</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_thread
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[a6]"></a>xQueueGenericReceive</STRONG> (Thumb, 602 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_thread
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[d1]"></a>xQueueGenericSend</STRONG> (Thumb, 636 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[eb]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[9d]"></a>xQueueGiveFromISR</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_new_event_handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_var_callback
</UL>

<P><STRONG><a name="[e9]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[ab]"></a>xTaskGenericCreate</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_thread
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[d0]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[80]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[7f]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[66]"></a>xTaskIncrementTick</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[d5]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[c8]"></a>xTaskResumeAll</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[7b]"></a>xTimerCreate</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xTimerCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>

<P><STRONG><a name="[e2]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[7e]"></a>xTimerGenericCommand</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[7d]"></a>xTimerIsTimerActive</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.xTimerIsTimerActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTimerIsTimerActive
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[48]"></a>logger_thread</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.logger_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = logger_thread &rArr;  logger_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[42]"></a>ble_evt_dispatch</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, ble_statck_thread.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_evt_dispatch &rArr; ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ble_status
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_statck_thread.o(i.ble_stack_thread)
</UL>
<P><STRONG><a name="[41]"></a>ble_new_event_handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_statck_thread.o(i.ble_new_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_new_event_handler &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_statck_thread.o(i.ble_stack_thread)
</UL>
<P><STRONG><a name="[45]"></a>conn_params_error_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_statck_thread.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_statck_thread.o(i.ble_stack_thread)
</UL>
<P><STRONG><a name="[4d]"></a>nus_data_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_statck_thread.o(i.nus_data_handler))
<BR>[Address Reference Count : 1]<UL><LI> ble_statck_thread.o(i.services_init)
</UL>
<P><STRONG><a name="[3e]"></a>on_adv_evt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_statck_thread.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = on_adv_evt &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_statck_thread.o(i.advertising_init)
</UL>
<P><STRONG><a name="[44]"></a>on_conn_params_evt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ble_statck_thread.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = on_conn_params_evt &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_statck_thread.o(i.ble_stack_thread)
</UL>
<P><STRONG><a name="[43]"></a>sys_evt_dispatch</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_statck_thread.o(i.sys_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sys_evt_dispatch &rArr; ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_statck_thread.o(i.ble_stack_thread)
</UL>
<P><STRONG><a name="[d4]"></a>prvUnlockQueue</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[c6]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[50]"></a>prvIdleTask</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvIdleTask &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[cf]"></a>prvSampleTimeNow</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvSampleTimeNow &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[51]"></a>prvTimerTask</STRONG> (Thumb, 608 bytes, Stack size 56 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvTimerTask &rArr; prvSampleTimeNow &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[4c]"></a>prvTaskExitError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port_cmsis.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port_cmsis.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[75]"></a>uuid_list_encode</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uuid_list_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[94]"></a>conn_params_negotiation</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[40]"></a>update_timeout_handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[9f]"></a>char_add</STRONG> (Thumb, 182 bytes, Stack size 80 bytes, ble_robotpen_dis.o(i.char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = char_add &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_robotpen_dis_init
</UL>

<P><STRONG><a name="[6b]"></a>twi_rx_start_transfer</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, nrf_drv_twi.o(i.twi_rx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = twi_rx_start_transfer &rArr; twi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>twi_transfer</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>

<P><STRONG><a name="[6c]"></a>twi_tx_start_transfer</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, nrf_drv_twi.o(i.twi_tx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = twi_tx_start_transfer &rArr; twi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>queue_process</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, fstorage.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
</UL>

<P><STRONG><a name="[3f]"></a>app_timer_callback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_timer_freertos.o(i.app_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_timer_callback &rArr; pvTimerGetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer_freertos.o(i.app_timer_create)
</UL>
<P><STRONG><a name="[c5]"></a>queue_write</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, nrf_queue.o(i.queue_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = queue_write &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_write
</UL>

<P><STRONG><a name="[49]"></a>nrf_log_backend_serial_hexdump_handler</STRONG> (Thumb, 354 bytes, Stack size 304 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_hexdump_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = nrf_log_backend_serial_hexdump_handler &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_serial.o(i.nrf_log_backend_hexdump_handler_get)
</UL>
<P><STRONG><a name="[4b]"></a>nrf_log_backend_serial_std_handler</STRONG> (Thumb, 310 bytes, Stack size 312 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_std_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrf_log_backend_serial_std_handler &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_serial.o(i.nrf_log_backend_std_handler_get)
</UL>
<P><STRONG><a name="[4a]"></a>uart_event_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.uart_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_serial.o(i.nrf_log_backend_init)
</UL>
<P><STRONG><a name="[a8]"></a>buf_prealloc</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_6
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
</UL>

<P><STRONG><a name="[70]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
</UL>

<P><STRONG><a name="[73]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[72]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3c]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL>
<P><STRONG><a name="[3d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
